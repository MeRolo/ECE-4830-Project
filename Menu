

////////////////////// For Buttons //////////////////////
const int UpPin = 2;     // Up Button Pin
const int DownPin = 3;     // Down Button Pin
const int EnterPin = 7;     // Enter Button Pin

int upButtonState = 0;         
int downButtonState = 0;        
int enterButtonState = 0;        
int lastButtonState = HIGH;   // the previous reading from the input pin


////////////////////// For Debouncing //////////////////////
unsigned long lastDebounceTime = 0;  // the last time the output pin was toggled
unsigned long debounceDelay = 200;    // the debounce time; increase if the output flickers

////////////////////// For OLED ////////////////////////////

// Screen dimensions
#define SCREEN_WIDTH  128
#define SCREEN_HEIGHT 128
// Pins for OLED
#define MOSI_PIN 12 //MOSI
#define SCLK_PIN 13 //CLK
#define DC_PIN   4 //DC
#define RST_PIN  6 //RESET
#define CS_PIN   5 //OLEDCS
// use MISO(SO)11

// Color definitions
#define BLUE            0x001F
#define CYAN            0x07FF  
#define WHITE           0xFFFF
#define  BLACK          0x0000
  
const int backgroundColor = CYAN; //darker cyan     
const int textColor = WHITE;     
const int highlightedTextColor = BLUE;     
const int textSize = 2;     

////////////// include OLED libraries ////////////////////
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1351.h>
#include <SPI.h>

////////////////////// FOR DISPLAYING TIME FUNCTION///////////////////////////////
const size_t MaxString = 16;
char oldTimeString[MaxString]= { 0 };
unsigned long startTime;
unsigned long seconds = 0;
unsigned long minutes =0;
unsigned long hours =0;
/////////////////////////////////////////////////// SET OLED /////////////////////////////////////////////////////////////////////
Adafruit_SSD1351 tft = Adafruit_SSD1351(SCREEN_WIDTH, SCREEN_HEIGHT, &SPI, CS_PIN, DC_PIN, RST_PIN);

///////////////////////menu display initialization///////////////////////
//initalize menu string
String menu[3][3]= { {"What kind of        exercise? __________","Push-ups","Jumping-  Jacks"},
                           {"Push-ups  Menu______", "Start/End","Go Back"},
                           {"Jumping-  Jacks Menu__________", "Start/End","Go Back"}};
int currentPosition[2]={0,0};
int highlightedPosition=1;
int currentMaxSizeArray=3;
bool isExercising = false;

////////////////////////////////////////////////////////////////////////////

void setup(void) {
  
  // initialize the pushbutton pin as an input:
  pinMode(UpPin, INPUT);
  pinMode(DownPin, INPUT);
  pinMode(EnterPin, INPUT);
  
  Serial.begin(9600);
  tft.begin();
  /// not sure what this actually does, but the screen is blurry without it
  uint16_t time = millis();
  tft.fillRect(0, 0, 128, 128, CYAN);
  time = millis() - time;
  
  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  //////////////////////////////////////////// DISPLAY OPENING SCREEN ////////////////////////////////////////////
  tft.setTextSize(3);
  tft.println("LET'S  EXER-    CISE!");
  delay(1350);
  
  ///print out menu 
  tft.setCursor(0,0);
  tft.fillScreen(backgroundColor);
  tft.setTextSize(textSize);
  for (int i=0; i <currentMaxSizeArray; i++){
        if(highlightedPosition ==i) tft.setTextColor(highlightedTextColor,backgroundColor);
        else tft.setTextColor(textColor,backgroundColor);
        
        tft.println(menu[currentPosition[1]][i]);// print line from array index
        //tft.setCursor(0,i+5);
      }
}
void loop() {
  // read the state of the pushbutton value:
  upButtonState = digitalRead(UpPin);
  downButtonState = digitalRead(DownPin);
  enterButtonState = digitalRead(EnterPin);

  if ( (millis() - lastDebounceTime) > debounceDelay  ) { // check if time has passed delay time to remove bounce
        
        ///testing if button pressed on serial monitor
       if (upButtonState == HIGH) {
        Serial.print("Up Button is Pressed \n");
        lastDebounceTime = millis(); //reset time on delay
      } 
       if (downButtonState == HIGH) {
        Serial.print("Down Button is Pressed \n");
        lastDebounceTime = millis(); //reset time on delay
      } 
      if (enterButtonState == HIGH) {
        Serial.print("Enter Button is Pressed \n");
        lastDebounceTime = millis(); //reset time on delay
      };// end of if statement 

      ///////////////////////////////////// MOVING CURSOR AND REFRESHING SCREEN //////////////////////////////////////
      ////////////////////Moving Cursor ////////////////////
      if(upButtonState == HIGH && highlightedPosition > 1) //if up, move cursor up
        highlightedPosition--;
      if(downButtonState == HIGH && highlightedPosition < currentMaxSizeArray-1)//if down, move cursor down
        highlightedPosition++;

      ////////////////////Changing Menu screen ////////////////////
      if(enterButtonState == HIGH){
          switch( currentPosition[1] ){//locating where is the current menu screen
          case 0: // Main Menu 
            if(highlightedPosition ==1){ //go into Push-Ups Menu
              currentPosition[0]=0;
              currentPosition[1]=1;
              }
            else if(highlightedPosition ==2){ //go into Jumping-Jacks Menu
              currentPosition[0]=0;
              currentPosition[1]=2;
              }
              highlightedPosition=1;//reset menu
            break;
            
          case 1: // Push-Up Menu
            if(highlightedPosition ==1){ //Start/Stop
              // record exercise
              if(!isExercising){ //if not exercising, start
                //start exercising i.e. start recording data
                Serial.print("Started work out \n");
                startTime = millis() / 1000;
              }
              else { // stop exercising
                Serial.print("Stopped work out \n");
              }
              isExercising = !isExercising; // if working out, stop; if not working out, start
              }
            else if(highlightedPosition ==2){ // Go back
              isExercising = false;
              currentPosition[0]=0;
              currentPosition[1]=0;
              highlightedPosition=1;
              }
            break;
            
           case 2: // Jumping-Jacks Menu
            if(highlightedPosition ==1){ //Start/Stop
              // record exercise
              }
            else if(highlightedPosition ==2){ // Go back
              currentPosition[0]=0;
              currentPosition[1]=0;
              highlightedPosition=1;
              }
            break;
            
      }};// end of if statement and case switch
      
     ////////////////////Refresh screen when button pressed ////////////////////
     if(upButtonState == HIGH | downButtonState == HIGH | enterButtonState == HIGH){
      ///print out menu whenever button pressed
        tft.fillScreen(backgroundColor);
        tft.setCursor(0,0);
        
        // print menu
        for (int i=0; i <currentMaxSizeArray; i++){
            if(highlightedPosition ==i) tft.setTextColor(highlightedTextColor,backgroundColor);
            else tft.setTextColor(textColor,backgroundColor);
         
            tft.println(menu[currentPosition[1]][i]);// print line from array index
        }

      }// end of fresh screen if statement

    }//end of debounce

      //////////////always refreshing timer if exercising
         if(isExercising){
            tft.setTextColor(textColor,BLUE);
            displayUpTime();
        }

}////////////////////////////////////////////// end of void loop







////////////function for displaying timed exercise  
void displayUpTime() {

    seconds = (millis()/1000) - startTime;
    hours = seconds / 3600;
    seconds = seconds % 3600;
    minutes = seconds / 60;
    seconds = seconds % 60;

    // allocate a buffer
    char newTimeString[MaxString] = { 0 };
    // construct the string representation
    sprintf(
        newTimeString,
        "%02lu:%02lu:%02lu",
        hours, minutes, seconds);

      // has the time string changed since the last oled update?
    if (strcmp(newTimeString,oldTimeString) != 0 ) {
        tft.setCursor(0,75);// set cursor
        tft.setTextColor(CYAN);// change the text color to the background color
        tft.print(oldTimeString);// redraw the old value to erase
        tft.setCursor(0,75);
        tft.setTextColor(WHITE);
    
        // draw the new time value
        tft.print(newTimeString);
        // and remember the new value
        strcpy(oldTimeString,newTimeString);
    }
    
    };
